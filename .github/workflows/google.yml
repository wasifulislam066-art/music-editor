<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mini Music Editor</title>
  <style>
    :root {
      --bg: #0f1220;
      --panel: #171a2a;
      --accent: #7c5cff;
      --text: #e8eaf6;
      --muted: #b6b9d6;
      --danger: #ff5c7a;
      --ok: #22c55e;
      --warn: #fbbf24;
    }
    * { box-sizing: border-box }
    html, body { height: 100% }
    body {
      margin: 0; background: linear-gradient(180deg, #0f1220, #0a0d1a);
      color: var(--text); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
    }
    .container { max-width: 1100px; margin: 0 auto; padding: 24px }
    header { display: flex; align-items: center; gap: 14px; margin-bottom: 16px }
    .logo {
      width: 40px; height: 40px; border-radius: 12px; background: radial-gradient(120% 120% at 20% 20%, #9efcff, #7c5cff 40%, #3f2b96 70%);
      box-shadow: 0 10px 24px rgba(124,92,255,.35), inset 0 0 12px rgba(255,255,255,.15);
    }
    h1 { font-size: 22px; margin: 0; letter-spacing: .6px }
    .card { background: var(--panel); border: 1px solid #23273a; border-radius: 18px; padding: 18px; box-shadow: 0 10px 24px rgba(0,0,0,.25) }
    .grid { display: grid; gap: 12px }
    .grid.cols-2 { grid-template-columns: 1.2fr .8fr }
    .toolbar { display:flex; flex-wrap: wrap; gap: 8px; align-items: center; margin-bottom: 12px }
    button, .file-label, select, input[type=range] {
      border: 1px solid #2a2f49; background: #1a1e32; color: var(--text);
      padding: 10px 12px; border-radius: 12px; cursor: pointer; font-weight: 600;
      transition: transform .05s ease, background .2s ease, border .2s ease, box-shadow .2s ease;
    }
    button:hover, .file-label:hover, select:hover { background: #212544 }
    button:active { transform: translateY(2px) }
    input[type=range] { width: 100% }
    .label { font-size: 14px; color: var(--muted); margin-top: 8px; display:block }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="logo"></div>
      <h1>Mini Music Editor</h1>
    </header>

    <div class="card grid cols-2">
      <div>
        <div class="toolbar">
          <label class="file-label">
            <input type="file" id="fileInput" accept="audio/*" hidden>
            Upload Audio
          </label>
          <button id="playBtn">▶ Play</button>
          <button id="pauseBtn">⏸ Pause</button>
          <button id="stopBtn">⏹ Stop</button>
        </div>
        <audio id="audio" controls style="width:100%; margin-top:12px"></audio>

        <label class="label">Volume</label>
        <input type="range" id="volume" min="0" max="1" step="0.01" value="1">

        <label class="label">Speed</label>
        <input type="range" id="speed" min="0.5" max="2" step="0.1" value="1">

        <label class="label">Style Preset</label>
        <select id="styleSelect">
          <option value="none">None</option>
          <option value="pop">Pop</option>
          <option value="rnb">R&B</option>
          <option value="guitar">Guitar</option>
          <option value="echo">Echo</option>
        </select>
      </div>

      <div>
        <label class="label">Trim Start</label>
        <input type="range" id="trimStart" min="0" max="100" value="0">

        <label class="label">Trim End</label>
        <input type="range" id="trimEnd" min="0" max="100" value="100">

        <button id="playTrim">▶ Play Selection</button>
      </div>
    </div>
  </div>

<script>
  const audio = document.getElementById('audio');
  const fileInput = document.getElementById('fileInput');
  const playBtn = document.getElementById('playBtn');
  const pauseBtn = document.getElementById('pauseBtn');
  const stopBtn = document.getElementById('stopBtn');
  const volume = document.getElementById('volume');
  const speed = document.getElementById('speed');
  const trimStart = document.getElementById('trimStart');
  const trimEnd = document.getElementById('trimEnd');
  const playTrim = document.getElementById('playTrim');
  const styleSelect = document.getElementById('styleSelect');

  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  const sourceNode = audioCtx.createMediaElementSource(audio);
  let currentEffect = null;

  let gainNode = audioCtx.createGain();
  sourceNode.connect(gainNode).connect(audioCtx.destination);

  let trimStartTime = 0;
  let trimEndTime = 0;

  fileInput.addEventListener('change', e => {
    const file = e.target.files[0];
    if (file) {
      const url = URL.createObjectURL(file);
      audio.src = url;
      audio.load();
    }
  });

  playBtn.addEventListener('click', () => { audioCtx.resume(); audio.play(); });
  pauseBtn.addEventListener('click', () => audio.pause());
  stopBtn.addEventListener('click', () => { audio.pause(); audio.currentTime = 0; });

  volume.addEventListener('input', e => { gainNode.gain.value = e.target.value; });
  speed.addEventListener('input', e => { audio.playbackRate = e.target.value; });

  audio.addEventListener('loadedmetadata', () => {
    trimStart.max = audio.duration;
    trimEnd.max = audio.duration;
    trimEnd.value = audio.duration;
    trimStartTime = 0;
    trimEndTime = audio.duration;
  });

  trimStart.addEventListener('input', e => {
    trimStartTime = parseFloat(e.target.value);
  });
  trimEnd.addEventListener('input', e => {
    trimEndTime = parseFloat(e.target.value);
  });

  playTrim.addEventListener('click', () => {
    if (audio.src) {
      audio.currentTime = trimStartTime;
      audio.play();
      const interval = setInterval(() => {
        if (audio.currentTime >= trimEndTime) {
          audio.pause();
          clearInterval(interval);
        }
      }, 200);
    }
  });

  styleSelect.addEventListener('change', e => {
    if (currentEffect) {
      currentEffect.disconnect();
      sourceNode.disconnect();
      sourceNode.connect(gainNode).connect(audioCtx.destination);
      currentEffect = null;
    }

    switch(e.target.value) {
      case 'pop': {
        let biquadFilter = audioCtx.createBiquadFilter();
        biquadFilter.type = 'highshelf';
        biquadFilter.frequency.setValueAtTime(3000, audioCtx.currentTime);
        biquadFilter.gain.setValueAtTime(6, audioCtx.currentTime);
        sourceNode.connect(biquadFilter).connect(gainNode);
        currentEffect = biquadFilter;
        break;
      }
      case 'rnb': {
        let bassBoost = audioCtx.createBiquadFilter();
        bassBoost.type = 'lowshelf';
        bassBoost.frequency.setValueAtTime(200, audioCtx.currentTime);
        bassBoost.gain.setValueAtTime(8, audioCtx.currentTime);
        sourceNode.connect(bassBoost).connect(gainNode);
        currentEffect = bassBoost;
        break;
      }
      case 'guitar': {
        let distortion = audioCtx.createWaveShaper();
        function makeDistortionCurve(amount) {
          let k = typeof amount === 'number' ? amount : 50,
              n_samples = 44100,
              curve = new Float32Array(n_samples),
              deg = Math.PI / 180;
          for (let i = 0; i < n_samples; ++i) {
            let x = i * 2 / n_samples - 1;
            curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
          }
          return curve;
        }
        distortion.curve = makeDistortionCurve(400);
        distortion.oversample = '4x';
        sourceNode.connect(distortion).connect(gainNode);
        currentEffect = distortion;
        break;
      }
      case 'echo': {
        let delay = audioCtx.createDelay();
        delay.delayTime.value = 0.25;
        let feedback = audioCtx.createGain();
        feedback.gain.value = 0.3;
        delay.connect(feedback);
        feedback.connect(delay);
        sourceNode.connect(delay).connect(gainNode);
        currentEffect = delay;
        break;
      }
    }
  });
</script>
</body>
</html># This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - '"main"'

env:
  PROJECT_ID: 'my-project' # TODO: update to your Google Cloud project ID
  GAR_LOCATION: 'us-central1' # TODO: update to your region
  GKE_CLUSTER: 'cluster-1' # TODO: update to your cluster name
  GKE_ZONE: 'us-central1-c' # TODO: update to your cluster zone
  DEPLOYMENT_NAME: 'gke-test' # TODO: update to your deployment name
  REPOSITORY: 'samples' # TODO: update to your Artifact Registry docker repository name
  IMAGE: 'static-site'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # TODO: update to your workload identity provider

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      # Set up kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to GKE'
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
